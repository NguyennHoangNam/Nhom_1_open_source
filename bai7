import tkinter as tk
import cv2
from PIL import Image, ImageTk

class OpenCVApp:
    def __init__(self, window, video_source=0):
        self.window = window
        self.window.title("OpenCV App")
        
        # Open the video source
        self.video_capture = cv2.VideoCapture(video_source)
        
        # Create a canvas to display the video stream
        self.canvas = tk.Canvas(window)
        self.canvas.pack()
        
        # Start the video stream
        self.update_frame()
    
    def update_frame(self):
        # Read a frame from the video source
        ret, frame = self.video_capture.read()
        
        if ret:
            # Convert the frame to RGB format
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # Resize the frame to fit the window
            height, width, channels = frame_rgb.shape
            if height > 0 and width > 0:
                image = Image.fromarray(frame_rgb)
                image = image.resize((width, height))
                
                # Display the frame on the canvas
                self.photo = ImageTk.PhotoImage(image)
                self.canvas.create_image(0, 0, anchor=tk.NW, image=self.photo)
        
        # Schedule the next frame update
        self.window.after(15, self.update_frame)

# Create the Tkinter window
window = tk.Tk()

# Create an instance of the OpenCVApp
app = OpenCVApp(window)

# Run the Tkinter event loop
window.mainloop()

# Release the video capture and close the OpenCV windows
app.video_capture.release()
cv2.destroyAllWindows()
